let

    true = \x y. x;
    false = \x y. y;
    if = \b e1 e2. b e1 e2;

    not = \b. b false true;
    and = \b1 b2. if b1 b2 false;
    or = \b1 b2. if b1 true b2;

    zero = \f x. x;
    um = \f x. f x;
    dois = \f x. f (f x);

    succ = \n. \A B. A (n A B);

    add = \n1 n2. n1 succ n2;
    mult = \n1 n2. n1 (\x. add n2 x) 0;

    isZero = \n. n (\x. false) true;
    isPos = \n. not (isZero n); 

    pair = \a b. \c. c a b;
    fst = \p. p true;
    snd = \p. p false;
    shiftInc = \p. pair (snd p) (succ (snd p));
    pred = \n. fst (n shiftInc (pair 0 0));
    sub = \a b. b pred a;
    menor = \a b. isPos (sub b a);

    exp = \m n. n (mult m) 1;

    Y = \f. (\x. f (x x)) (\x. f (x x));

    S_div = \R a b.
      if (menor a b)
         0
         (succ (R (sub a b) b));

    div = Y S_div;

    calcula = \a. add (exp 2 (div a 2)) a

in

    calcula 5
