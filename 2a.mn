// limpa variável
operation clear(A){
  1: if zero A then goto 0 else goto 2
  2: do dec A goto 1
}

// A:=A+B (soma não-destrutiva)
operation soma(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do inc A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}
// A:=B usando C (atribuição não-destrutiva)
operation load(A,B,C){
  1: do clear(A) goto 2
  2: do soma(A,B,C) goto 0
}

// A:=A div 2 usando C (divisão inteira por 2)
operation div2(A,C){
  1: do load(C,A,B) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: do inc A goto 2
}


// A:=A*B usando C,D,E (multiplicação não destrutiva)
operation mult(A,B,C,D,E){
  1: if zero A then goto 3 else goto 2
  2: if zero B then goto 3 else goto 4
  3: do clear(A) goto 0
  4: do load(C,A,E) goto 5
  5: do load(D,B,E) goto 6
  6: do dec D goto 7
  7: if zero D then goto 11 else goto 8
  8: do soma(A,C,E) goto 9
  9: do dec D goto 10
  10: if zero D then goto 11 else goto 8
  11: do clear(C) goto 0
  
}

// A:=A^B usando C,D,E,F,G (potenciação não-destrutiva)
operation exp(A,B,C,D,E,F,G){
  1: if zero B then goto 2 else goto 4
  2: do clear(A) goto 3
  3: do inc A goto 0
  4: do load(F,A,C) goto 5
  5: do load(G,B,C) goto 6
  6: do dec G goto 7
  7: if zero G then goto 11 else goto 8
  8: do mult(A,F,C,D,E) goto 9
  9: do dec G goto 10
  10: if zero G then goto 11 else goto 8
  11: do clear(F) goto 0
}

// A divisivel_por_2 usando C (teste se multiplo de 2)
test divBy2(A,C){
  1: do load(C,A,B) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 2
}
// A:=fst(B) usando C,D (extrai o primeiro componente do par)
operation fst(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy2(C,D) then goto 4 else goto 0
  4: do div2(C,D) goto 5
  5: do inc A goto 3
}

// A:=snd(B)
operation snd(A,B,C){
  1: do dec B goto 2
  2: do div2(B,C) goto 3
  3: do load(A,B,D) goto 0
}


// A,B:=decod(C);
operation decod(A,B,C,R1,R2){
  1: do fst(A,C,R1,R2) goto 2
  2: do snd(B,R1,R2) goto 3
}

// C:=cod(A,B) preservando A e B
operation cod(A,B,C,COPIA_A,COPIA_B,R1,R2,R3,R4,R5,R6,R7){
  1: do load(COPIA_A,A,R1) goto 2
  2: do load(COPIA_B,B,R1) goto 3
  3: do add R2 2 goto 4
  4: do mult(COPIA_B,R2,R5,R6,R7) goto 5
  5: do inc COPIA_B goto 6
  6: do exp(R2,COPIA_A,R3,R4,R5,R6,R7) goto 7
  7: do mult(R2, COPIA_B, R3,R4,R5) goto 8
  8: do load(C,R2,E) goto 0
}
// C:= foo(x)= cod(2*x,x^2)
operation foo(ENT_X,AUX1,AUX2,AUX3,AUX4,R1,R2,R3,R4,R5,R6,R7,C,R8){
    1: do load(AUX1,ENT_X,AUX2) goto 2
    2: do add R1 2 goto 3
    3: do mult(R1,AUX1,R2,R3,R4)goto 4 
    4: do clear(R2) goto 5
    5: do clear(R3) goto 6
    6: do clear(R4) goto 7
    7: do load (AUX2,ENT_X,AUX3) goto 8
    8: do add R2 2 goto 9
    9: do exp(AUX2,R2,R3,R4,R5,R6,R7) goto 10
    10: do clear(R2) goto 11
    11: do clear(R3) goto 12
    12: do clear(R4) goto 13
    13: do clear(R5) goto 14
    14: do clear(R6) goto 15
    15: do clear(R7) goto 16
    16: do cod(R1,AUX2,C,AUX3,AUX4,R2,R3,R4,R5,R6,R7,R8) goto 0
}

main{
    1: do foo(X,AUX1,AUX2,AUX3,AUX4,R1,R2,R3,R4,R5,R6,R7,C,R8) goto 2
    2: do load(Y,C,AUX5) goto 0
}